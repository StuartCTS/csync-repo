# This is an example of a typical ApplicationSet which uses the cluster generator.
# An ApplicationSet is comprised with two stanzas:
#  - spec.generator - producer of a list of values supplied as arguments to an app template
#  - spec.template - an application template, which has been parameterized
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: waza
spec:
  generators:
  - clusters: #{} # This is a generator, specifically, a cluster generator.
      selector:
        matchLabels:
          argocd.argoproj.io/secret-type: cluster
  template: 
    # This is a template Argo CD Application, but with support for parameter substitution.
    metadata:
      name: '{{name}}-waza'
    spec:
      project: "default"
      source:
        repoURL: https://github.com/StuartCTS/csync-repo/
        targetRevision: HEAD
        path: samples/apps
      destination:
        server: '{{server}}'
        namespace: waza
      syncPolicy:
        automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
          prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
          selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
          allowEmpty: false
        syncOptions:     # Sync options which modifies sync behavior
        - CreateNamespace=true